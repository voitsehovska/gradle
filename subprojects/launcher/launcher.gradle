import org.gradle.build.GradleStartScriptGenerator
import org.gradle.gradlebuild.unittestandcompile.ModuleType

plugins {
    id 'gradlebuild.classycle'
}

configurations {
    startScriptGenerator
}

dependencies {
    compile project(':baseServices')
    compile project(':jvmServices')
    compile project(':core')
    compile project(':cli')
    compile project(':buildOption')
    compile project(':toolingApi')
    compile project(':native')
    compile project(':logging')
    compile project(':docs')

    compile libraries.asm.coordinates
    compile libraries.commons_io.coordinates
    compile libraries.commons_lang.coordinates
    compile libraries.slf4j_api.coordinates

    integTestCompile project(':internalIntegTesting')
    // Needed for testing debug command line option (JDWPUtil)
    integTestCompile files(rootProject.availableJavaInstallations.javaInstallationForTest.toolsJar ?: [])
    integTestRuntime project(':plugins')
    integTestRuntime project(':languageNative')

    testFixturesCompile project(':internalIntegTesting')
}

gradlebuildJava {
    moduleType = ModuleType.ENTRY_POINT
}

testFixtures {
    from(':core')
    from(':languageJava')
    from(':messaging')
    from(':logging')
    from(':toolingApi')
}

integTestTasks.configureEach {
    maxParallelForks = Math.min(3, Build_extensionsKt.getMaxParallelForks(project))
}

def configureJar = tasks.register("configureJar") {
    doLast {
        def classpath = [":baseServices", ":coreApi", ":core"].collect { project(it).jar.archivePath.name }.join(" ")
        jar.manifest.mainAttributes('Class-Path': classpath)
    }
}

tasks.named("jar").configure {
    dependsOn configureJar
    manifest.mainAttributes('Main-Class': "org.gradle.launcher.GradleMain")
}

tasks.register("startScripts", GradleStartScriptGenerator) {
    startScriptsDir = new File("$buildDir/startScripts")
    launcherJar = jar.outputs.files
}

import org.gradle.gradlebuild.testing.integrationtests.cleanup.WhenNotEmpty
testFilesCleanup {
    policy = WhenNotEmpty.REPORT
}
